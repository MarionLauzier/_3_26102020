//FORMATTING OF THE MENU LAYOUT OF EACH RESTAURANT PAGE
.topimg {
	height: 270px;
	width: 100%;
	@include tablet-only {
		@include reducewidth(80%);
	}
	@include screensize(desktop) {
		height: 35vh;
	}
	& img {
		width: 100%;
		height: 100%;
		object-fit: cover;
	}
}

.menu {
	background: map-get($greys, lighter);
	border-top-left-radius: 40px;
	border-top-right-radius: 40px;
	margin-top: -50px;
	position: relative;
	padding: 31px 3.7% (79px - 29px) 3.7%;
	display: flex;
	flex-direction: column;
	align-items: center;

	//media queries for tablet and desktop where each type of dish is formmatted in a column
	@include screensize(tablet) {
		@include reducewidth(70%);
	}
	@include screensize(desktop) {
		@include reducewidth(90%);
		padding-left: 3%;
		padding-right: 3%;
		display: grid;
		grid-template-columns: repeat(3, auto);
		grid-template-rows: repeat(4, auto);
		grid-template-areas: "resto resto resto" ". . ." ". . ." "bouton bouton bouton";
		grid-auto-flow: column;
		justify-content: space-evenly;
		align-items: start;
	}
	& h1 {
		padding-left: 6px;
		margin-bottom: 30px;
		position: relative;
		align-self: flex-start;
		width: $menublockwidth;
		@include screensize(desktop) {
			grid-area: resto;
		}
		& .fa-heart {
			right: calculateRem(23px);
			font-size: calculateRem(23px);
			margin-top: 7px;
		}
	}
	& h2 {
		padding-left: 6px;
		width: 100%;
		margin-bottom: 8px;
		position: relative;
		align-self: flex-start;
		@include tablet-only {
			padding-left: calc(50% - (#{$menublockwidth} / 2) + 6px);
		}
		// green underline
		&::after {
			content: "";
			display: inline-block;
			background: $col-ter;
			height: calculateRem(3px);
			width: calculateRem(40px);

			position: absolute;
			left: 6px;
			@include tablet-only {
				left: calc(50% - (#{$menublockwidth} / 2) + 6px);
			}
			bottom: -8px;
		}
	}
	&__content {
		list-style-type: none;
		padding-top: 14px;
		padding-bottom: 25px;

		& .taller--p {
			height: calculateRem(85px);
		}
		& .taller--h3 {
			height: calculateRem(90px);
		}

		& li {
			background: white;
			border-radius: 12px;
			box-shadow: 0px 2px 8px map-get($greys, medium);
			height: calculateRem(70px);
			width: $menublockwidth;
			overflow: hidden;
			display: grid;
			margin-bottom: 12px;
			grid-template-columns: repeat(3, auto);
			animation: fade reverse ease-out $menu-loader-dur backwards,
				menuloader ease-out $menu-loader-dur forwards;
			//addition of a longer delay foreach dish so that they can appear one at a time
			@for $i from 1 through 4 {
				&:nth-of-type(#{$i}) {
					animation-delay: $i * $menu-loader-delay;
				}
			}

			& .dish {
				grid-column: 1/2;
				width: $dishblockwidth;
				padding: 12px 10px;
				transition: width $check-dur ease-out;

				& h3,
				p {
					width: 100%;
					white-space: nowrap;
					overflow: hidden;
					text-overflow: ellipsis;
				}
				& p {
					padding-top: 3px;
				}
			}
			& .price {
				padding-bottom: 13px;
				grid-column: 2/3;
				display: flex;
				align-items: flex-end;
				width: calc(#{$menublockwidth} - #{$dishblockwidth});
			}
			// (dish + price)width = li block width therefore check block is outside and hence hidden when li block is not hovered
			& .check {
				grid-column: 3/4;
				background: $col-ter;
				color: white;
				@include centerblock(center);
				font-size: 20px;
				height: 100%;
				width: $checkblockwidth;
				& i {
					display: inline-block;
					transition: transform $check-dur ease-out;
					transform: rotate(0deg);
				}
			}

			&:hover {
				cursor: pointer;
				& .dish {
					width: calc(#{$dishblockwidth} - #{$checkblockwidth});
					//reducing the size of the dish block of the size of the check block when li block hovered allows the check block to appear
				}
				& .check i {
					transform: rotate(360deg);
				}
			}
		}
	}
	& button {
		width: calculateRem(188px);
		@include screensize(desktop) {
			grid-area: bouton;
			justify-self: center;
		}
	}
}
@keyframes menuloader {
	from {
		transform: translateY(20px);
	}

	to {
		transform: translateY(0px);
	}
}
