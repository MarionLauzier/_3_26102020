//location section formatting
.location {
	width: 100%;
	background: map-get($greys, lighter);
	& > p {
		height: calculateRem(50px);
		width: 100%;
		background: map-get($greys, light);
		box-shadow: inset 0 3px 5px -6px black;
		color: map-get($greys, darker);
		@include centerblock(center);
		@include font(16px, medium);
		position: relative;
		& i {
			display: block;
			position: absolute;
			left: calc(50% - #{calculateRem(82px)});
		}
	}
	& form {
		width: 100%;
		padding-top: 38px;
		padding-bottom: 28px;
		text-align: center;
		display: flex;
		flex-direction: column;
		align-items: center;
		& h1 {
			width: 75%;
			margin-bottom: 11px;
			position: relative;
			left: -8px;
		}
		& p {
			@include font(18px, light);
			color: map-get($greys, darker);
			position: relative;
			left: 4px;
			width: 90%;
		}
		& button {
			position: relative;
			left: 4px;
		}
	}
}

//fonctionnement section formatting
.fonct {
	padding: 48px 5.3% 47px 5.3%;
	& ol {
		width: 100%;
		list-style: none;
		counter-reset: li;
		margin-top: 25px;
		padding-left: 10px;

		& li {
			counter-increment: li;
			width: 100%;
			max-width: calculateRem(350px);
			height: calculateRem(75px);
			background: map-get($greys, lighter);
			margin: 0 auto 22px auto;
			border-radius: 20px;
			@include centerblock(flex-start);
			box-shadow: 2px 5px 12px map-get($greys, medium);

			&::before {
				content: counter(li);
				color: white;
				background: $col-prim;
				border-radius: 50%;
				@include font(14px, reg);
				width: calculateRem(25px);
				height: calculateRem(25px);
				margin: 0 0 0 calculateRem(-10px);
				padding: 2px 0 0 0;
				@include centerblock(center);
			}
			&:last-of-type {
				background-color: adjust-color(
					$col-prim,
					$saturation: 35%,
					$lightness: 36.5%
				);
				& i {
					color: $col-prim;
				}
			}
			& i {
				font-size: calculateRem(18px);
				width: 19%;
				color: map-get($greys, dark);
			}
		}
	}
}
// restaurant section formatting
.resto {
	background: map-get($greys, lighter);
	padding: 54px 5.3% 46px 5.3%;
	display: flex;
	flex-direction: row;
	flex-wrap: wrap;
	justify-content: space-between;
	& h2 {
		margin-bottom: 21px;
		min-width: 100%;
	}
	& a {
		display: block;
		width: 100%;
		@include screensize(tablet) {
			width: 48%;
		}
		color: black;
	}
	&__fig {
		width: 100%;
		border-radius: 15px;
		margin-bottom: 18px;
		box-shadow: 2px 4px 6px map-get($greys, medium);
		background: white;
		position: relative;
		&__img {
			width: 100%;
			object-fit: cover;
			object-position: bottom;
			height: calculateRem(174px);
			border-top-left-radius: 15px;
			border-top-right-radius: 15px;
			&--pos {
				object-position: 50% 61%;
			}
		}
		&__new {
			background: $col-ter;
			color: saturate(darken($col-ter, 47.75%), 50%);
			position: absolute;
			top: calculateRem(12px);
			right: calculateRem(12px);
			@include font(14px, medium);
			width: calculateRem(80px);
			height: calculateRem(30px);
			text-align: center;
			line-height: calculateRem(30px); //to center text line-height=height
		}
		&__cap {
			padding: 12px 0 0 12px;
			height: calculateRem(73px);
			width: 100%;
			position: relative;
			& h3 {
				margin-bottom: calculateRem(2px);
			}
			&__heart {
				font-size: calculateRem(23px);
				position: absolute;
				bottom: 45%;
				right: 23px;
			}
		}
	}
}

//spinner design
.spinner {
	height: 100vh;
	width: inherit;
	background: rgba($col-sec, 0.3);
	position: fixed;
	top: 0;
	z-index: 2;
	@include centerblock(center);
	//display of spinner for 3s which then fades aways and is moved out of the screen
	animation: fade 200ms 2.8s linear forwards, removes 0s 3s forwards;

	//generation of three superimposed blocks with pseudo-elements before and after to handle color changes with opacity only of each dot
	&__dot {
		height: 20px;
		width: 20px;
		border-radius: 50%;
		margin: 0 10px;
		// each dot is bouncing infinitely through a translate keyframes
		animation: bounce $bounce-dur alternate infinite ease;

		position: relative;
		&::before {
			content: "";
			display: block;
			height: inherit;
			width: inherit;
			border-radius: inherit;
			opacity: 0;
		}
		&::after {
			content: "";
			display: block;
			height: inherit;
			width: inherit;
			border-radius: inherit;
			position: absolute;
			top: 0px;
			opacity: 0;
		}

		//loop to generate delay between each dot and to change the color at each bounce:
		//dot1 : Purple, Pink, Green
		//dot2 : Pink, Green, Purple
		//dot3 : Green, Purple, Pink
		//second color is the before element color and it appears by changing its opacity to 1 for the time of the bounce of the given color with seccolorchange keyframes
		//third color is the after element color and it appears by changing its opacity to 1 for the time of the bounce of the given color with tercolorchange keyframes

		@for $i from 1 through 3 {
			$delay: ($i - 1) * $bounce-dur / 4;
			&:nth-of-type(#{$i}) {
				background: map-get($colors, $i);
				animation-delay: $delay;

				&::before {
					background: map-get($colors, mult3(($i + 1)));
					animation: seccolorchange (3 * $bounce-dur) $delay step-end infinite;
				}

				&::after {
					background: map-get($colors, mult3(($i + 2)));
					animation: tercolorchange (3 * $bounce-dur) $delay step-end infinite;
				}
			}
		}
	}
}
@keyframes fade {
	from {
		opacity: 1;
	}

	to {
		opacity: 0;
	}
}
@keyframes removes {
	from {
		transform: translateX(0);
	}
	to {
		transform: translateX(-9999px);
	}
}
@keyframes bounce {
	0% {
		transform: translateY(0);
	}
	100% {
		transform: translateY(-50px);
	}
}
@keyframes seccolorchange {
	0% {
		opacity: 0;
	}
	33% {
		opacity: 1;
	}
	66%,
	100% {
		opacity: 0;
	}
}
@keyframes tercolorchange {
	0% {
		opacity: 0;
	}
	66% {
		opacity: 1;
	}
	100% {
		opacity: 0;
	}
}
